/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
} from '@solana/web3.js';
import { SOL_STAKE_VIEW_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type GetStakeActivatingAndDeactivatingInstruction<
  TProgram extends string = typeof SOL_STAKE_VIEW_PROGRAM_PROGRAM_ADDRESS,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountStakeHistory extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStake extends string
        ? ReadonlyAccount<TAccountStake>
        : TAccountStake,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      ...TRemainingAccounts,
    ]
  >;

export type GetStakeActivatingAndDeactivatingInstructionData = {
  discriminator: number;
};

export type GetStakeActivatingAndDeactivatingInstructionDataArgs = {};

export function getGetStakeActivatingAndDeactivatingInstructionDataEncoder(): Encoder<GetStakeActivatingAndDeactivatingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getGetStakeActivatingAndDeactivatingInstructionDataDecoder(): Decoder<GetStakeActivatingAndDeactivatingInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getGetStakeActivatingAndDeactivatingInstructionDataCodec(): Codec<
  GetStakeActivatingAndDeactivatingInstructionDataArgs,
  GetStakeActivatingAndDeactivatingInstructionData
> {
  return combineCodec(
    getGetStakeActivatingAndDeactivatingInstructionDataEncoder(),
    getGetStakeActivatingAndDeactivatingInstructionDataDecoder()
  );
}

export type GetStakeActivatingAndDeactivatingInput<
  TAccountStake extends string = string,
  TAccountStakeHistory extends string = string,
> = {
  /** The target SOL stake account */
  stake: Address<TAccountStake>;
  /** The stake history sysvar */
  stakeHistory: Address<TAccountStakeHistory>;
};

export function getGetStakeActivatingAndDeactivatingInstruction<
  TAccountStake extends string,
  TAccountStakeHistory extends string,
>(
  input: GetStakeActivatingAndDeactivatingInput<
    TAccountStake,
    TAccountStakeHistory
  >
): GetStakeActivatingAndDeactivatingInstruction<
  typeof SOL_STAKE_VIEW_PROGRAM_PROGRAM_ADDRESS,
  TAccountStake,
  TAccountStakeHistory
> {
  // Program address.
  const programAddress = SOL_STAKE_VIEW_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stake: { value: input.stake ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.stakeHistory),
    ],
    programAddress,
    data: getGetStakeActivatingAndDeactivatingInstructionDataEncoder().encode(
      {}
    ),
  } as GetStakeActivatingAndDeactivatingInstruction<
    typeof SOL_STAKE_VIEW_PROGRAM_PROGRAM_ADDRESS,
    TAccountStake,
    TAccountStakeHistory
  >;

  return instruction;
}

export type ParsedGetStakeActivatingAndDeactivatingInstruction<
  TProgram extends string = typeof SOL_STAKE_VIEW_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The target SOL stake account */
    stake: TAccountMetas[0];
    /** The stake history sysvar */
    stakeHistory: TAccountMetas[1];
  };
  data: GetStakeActivatingAndDeactivatingInstructionData;
};

export function parseGetStakeActivatingAndDeactivatingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGetStakeActivatingAndDeactivatingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stake: getNextAccount(),
      stakeHistory: getNextAccount(),
    },
    data: getGetStakeActivatingAndDeactivatingInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
